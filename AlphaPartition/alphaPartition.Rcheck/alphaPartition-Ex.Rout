
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "alphaPartition"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "alphaPartition-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('alphaPartition')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("alphaPartition")
> ### * alphaPartition
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: alphaPartition
> ### Title: alphaPartition.R
> ### Aliases: alphaPartition
> 
> ### ** Examples
> 
> ## Small pedigree with additive genetic (=breeding) values
> ped <- data.frame(  id=c(  1,   2,   3,   4,   5,   6),
+                    fid=c(  0,   0,   2,   0,   4,   0),
+                    mid=c(  0,   0,   1,   0,   3,   3),
+                    loc=c("A", "B", "A", "B", "A", "A"),
+                    gen=c(  1,   1,   2,   2,   3,   3),
+                   trt1=c(100, 120, 115, 130, 125, 125),
+                   trt2=c(100, 110, 105, 100,  85, 110))
> 
> ## Partition additive genetic values
> tmp <- alphaPartition(x=ped, colAGV=c("trt1", "trt2"))

Size:
 - individuals: 6 
 - traits: 2 (trt1, trt2)
 - paths: 2 (A, B)
 - unknown (missing) values:
trt1 trt2 
   0    0 
> print(tmp)


 Partitions of additive genetic values 
   - individuals: 6 
   - paths: 2 (A, B)
   - traits: 2 (trt1, trt2)

 Trait: trt1 

  id fid mid loc gen trt1 trt1_pa trt1_w trt1_A trt1_B
1  1   0   0   A   1  100     0.0  100.0    100      0
2  2   0   0   B   1  120     0.0  120.0      0    120
3  3   2   1   A   2  115   110.0    5.0     55     60
4  4   0   0   B   2  130     0.0  130.0      0    130
5  5   4   3   A   3  125   122.5    2.5     30     95
6  6   0   3   A   3  125    57.5   67.5     95     30

 Trait: trt2 

  id fid mid loc gen trt2 trt2_pa trt2_w trt2_A trt2_B
1  1   0   0   A   1  100     0.0  100.0  100.0    0.0
2  2   0   0   B   1  110     0.0  110.0    0.0  110.0
3  3   2   1   A   2  105   105.0    0.0   50.0   55.0
4  4   0   0   B   2  100     0.0  100.0    0.0  100.0
5  5   4   3   A   3   85   102.5  -17.5    7.5   77.5
6  6   0   3   A   3  110    52.5   57.5   82.5   27.5

> 
> ## Summarize by generation
> summary(tmp, by="gen")


 Summary of partitions of additive genetic values 
   - paths: 2 (A, B)
   - traits: 2 (trt1, trt2)

 Trait: trt1 (absolute) 

  gen N   Sum    A    B
1   1 2 110.0 50.0 60.0
2   2 2 122.5 27.5 95.0
3   3 2 125.0 62.5 62.5

 Trait: trt1 (relative) 

  gen N Sum         A         B
1   1 2   1 0.4545455 0.5454545
2   2 2   1 0.2244898 0.7755102
3   3 2   1 0.5000000 0.5000000

 Trait: trt2 (absolute) 

  gen N   Sum  A    B
1   1 2 105.0 50 55.0
2   2 2 102.5 25 77.5
3   3 2  97.5 45 52.5

 Trait: trt2 (relative) 

  gen N Sum         A         B
1   1 2   1 0.4761905 0.5238095
2   2 2   1 0.2439024 0.7560976
3   3 2   1 0.4615385 0.5384615

> 
> ## There are also two demos
> #demo(topic="alphaPartition_deterministic", package="alphaPartition", ask=interactive())
> #demo(topic="alphaPartition_stochastic",     package="alphaPartition", ask=interactive())
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("alphaPartition", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("alphaPartitionSubset")
> ### * alphaPartitionSubset
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: alphaPartitionSubset
> ### Title: alphaPartitionSubset.R
> ### Aliases: alphaPartitionSubset
> 
> ### ** Examples
> 
> ## Small pedigree with additive genetic (=breeding) values
> ped <- data.frame(  id=c(  1,   2,   3,   4,   5,   6),
+                   fid=c(  0,   0,   2,   0,   4,   0),
+                   mid=c(  0,   0,   1,   0,   3,   3),
+                   loc=c("A", "B", "A", "B", "A", "A"),
+                   gen=c(  1,   1,   2,   2,   3,   3),
+                  trt1=c(100, 120, 115, 130, 125, 125),
+                  trt2=c(100, 110, 105, 100,  85, 110))
> 
> ## Partition additive genetic values
> (tmp <- alphaPartition(x=ped, colAGV=c("trt1", "trt2")))

Size:
 - individuals: 6 
 - traits: 2 (trt1, trt2)
 - paths: 2 (A, B)
 - unknown (missing) values:
trt1 trt2 
   0    0 


 Partitions of additive genetic values 
   - individuals: 6 
   - paths: 2 (A, B)
   - traits: 2 (trt1, trt2)

 Trait: trt1 

  id fid mid loc gen trt1 trt1_pa trt1_w trt1_A trt1_B
1  1   0   0   A   1  100     0.0  100.0    100      0
2  2   0   0   B   1  120     0.0  120.0      0    120
3  3   2   1   A   2  115   110.0    5.0     55     60
4  4   0   0   B   2  130     0.0  130.0      0    130
5  5   4   3   A   3  125   122.5    2.5     30     95
6  6   0   3   A   3  125    57.5   67.5     95     30

 Trait: trt2 

  id fid mid loc gen trt2 trt2_pa trt2_w trt2_A trt2_B
1  1   0   0   A   1  100     0.0  100.0  100.0    0.0
2  2   0   0   B   1  110     0.0  110.0    0.0  110.0
3  3   2   1   A   2  105   105.0    0.0   50.0   55.0
4  4   0   0   B   2  100     0.0  100.0    0.0  100.0
5  5   4   3   A   3   85   102.5  -17.5    7.5   77.5
6  6   0   3   A   3  110    52.5   57.5   82.5   27.5

> 
> ## Keep some partitions (working on object of class alphaPartition)
> (tmp2 <- alphaPartitionSubset(x=tmp, paths="A"))


 Partitions of additive genetic values 
   - individuals: 6 
   - paths: 1 (A)
   - traits: 2 (trt1, trt2)
   - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'alphaPartitionPathSubset'

 Trait: trt1 

  id fid mid loc gen trt1 trt1_pa trt1_w trt1_A
1  1   0   0   A   1  100     0.0  100.0    100
2  2   0   0   B   1  120     0.0  120.0      0
3  3   2   1   A   2  115   110.0    5.0     55
4  4   0   0   B   2  130     0.0  130.0      0
5  5   4   3   A   3  125   122.5    2.5     30
6  6   0   3   A   3  125    57.5   67.5     95

 Trait: trt2 

  id fid mid loc gen trt2 trt2_pa trt2_w trt2_A
1  1   0   0   A   1  100     0.0  100.0  100.0
2  2   0   0   B   1  110     0.0  110.0    0.0
3  3   2   1   A   2  105   105.0    0.0   50.0
4  4   0   0   B   2  100     0.0  100.0    0.0
5  5   4   3   A   3   85   102.5  -17.5    7.5
6  6   0   3   A   3  110    52.5   57.5   82.5

> 
> ## Summarize by generation
> (tmpS <- summary(tmp, by="gen"))


 Summary of partitions of additive genetic values 
   - paths: 2 (A, B)
   - traits: 2 (trt1, trt2)

 Trait: trt1 (absolute) 

  gen N   Sum    A    B
1   1 2 110.0 50.0 60.0
2   2 2 122.5 27.5 95.0
3   3 2 125.0 62.5 62.5

 Trait: trt1 (relative) 

  gen N Sum         A         B
1   1 2   1 0.4545455 0.5454545
2   2 2   1 0.2244898 0.7755102
3   3 2   1 0.5000000 0.5000000

 Trait: trt2 (absolute) 

  gen N   Sum  A    B
1   1 2 105.0 50 55.0
2   2 2 102.5 25 77.5
3   3 2  97.5 45 52.5

 Trait: trt2 (relative) 

  gen N Sum         A         B
1   1 2   1 0.4761905 0.5238095
2   2 2   1 0.2439024 0.7560976
3   3 2   1 0.4615385 0.5384615

> 
> ## Keep some partitions (working on object of class summaryAlphaPartition)
> (tmpS2 <- alphaPartitionSubset(x=tmpS, paths="A"))


 Summary of partitions of additive genetic values 
   - paths: 1 (A)
   - traits: 2 (trt1, trt2)
   - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'alphaPartitionPathSubset'

 Trait: trt1 (absolute) 

  gen N   Sum    A
1   1 2 110.0 50.0
2   2 2 122.5 27.5
3   3 2 125.0 62.5

 Trait: trt1 (relative) 

  gen N Sum         A
1   1 2   1 0.4545455
2   2 2   1 0.2244898
3   3 2   1 0.5000000

 Trait: trt2 (absolute) 

  gen N   Sum  A
1   1 2 105.0 50
2   2 2 102.5 25
3   3 2  97.5 45

 Trait: trt2 (relative) 

  gen N Sum         A
1   1 2   1 0.4761905
2   2 2   1 0.2439024
3   3 2   1 0.4615385

> 
> ## ... must be equal to
> (tmpS3 <- summary(tmp2, by="gen"))


 Summary of partitions of additive genetic values 
   - paths: 1 (A)
   - traits: 2 (trt1, trt2)
   - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'alphaPartitionPathSubset'

 Trait: trt1 (absolute) 

  gen N   Sum    A
1   1 2 110.0 50.0
2   2 2 122.5 27.5
3   3 2 125.0 62.5

 Trait: trt1 (relative) 

  gen N Sum         A
1   1 2   1 0.4545455
2   2 2   1 0.2244898
3   3 2   1 0.5000000

 Trait: trt2 (absolute) 

  gen N   Sum  A
1   1 2 105.0 50
2   2 2 102.5 25
3   3 2  97.5 45

 Trait: trt2 (relative) 

  gen N Sum         A
1   1 2   1 0.4761905
2   2 2   1 0.2439024
3   3 2   1 0.4615385

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("alphaPartitionSubset", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("alphaPartitionSum")
> ### * alphaPartitionSum
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: alphaPartitionSum
> ### Title: alphaPartitionSum.R
> ### Aliases: alphaPartitionSum
> 
> ### ** Examples
> 
> ## Small pedigree with additive genetic (=breeding) values
> ped <- data.frame(  id=c(  1,   2,   3,   4,   5,   6),
+                   fid=c(  0,   0,   2,   0,   4,   0),
+                   mid=c(  0,   0,   1,   0,   3,   3),
+                   loc=c("A", "B", "A", "B", "A", "A"),
+                   gen=c(  1,   1,   2,   2,   3,   3),
+                  trt1=c(100, 120, 115, 130, 125, 125),
+                  trt2=c(100, 110, 105,  140,  85, 110))
> 
> ## Partition additive genetic values
> (tmp <- alphaPartition(x=ped, colAGV=c("trt1", "trt2")))

Size:
 - individuals: 6 
 - traits: 2 (trt1, trt2)
 - paths: 2 (A, B)
 - unknown (missing) values:
trt1 trt2 
   0    0 


 Partitions of additive genetic values 
   - individuals: 6 
   - paths: 2 (A, B)
   - traits: 2 (trt1, trt2)

 Trait: trt1 

  id fid mid loc gen trt1 trt1_pa trt1_w trt1_A trt1_B
1  1   0   0   A   1  100     0.0  100.0    100      0
2  2   0   0   B   1  120     0.0  120.0      0    120
3  3   2   1   A   2  115   110.0    5.0     55     60
4  4   0   0   B   2  130     0.0  130.0      0    130
5  5   4   3   A   3  125   122.5    2.5     30     95
6  6   0   3   A   3  125    57.5   67.5     95     30

 Trait: trt2 

  id fid mid loc gen trt2 trt2_pa trt2_w trt2_A trt2_B
1  1   0   0   A   1  100     0.0  100.0  100.0    0.0
2  2   0   0   B   1  110     0.0  110.0    0.0  110.0
3  3   2   1   A   2  105   105.0    0.0   50.0   55.0
4  4   0   0   B   2  140     0.0  140.0    0.0  140.0
5  5   4   3   A   3   85   122.5  -37.5  -12.5   97.5
6  6   0   3   A   3  110    52.5   57.5   82.5   27.5

> 
> ## Sum some partitions (working on object of class alphaPartition)
> (tmp2 <- alphaPartitionSum(x=tmp, map=list(c("X", "A", "B"), c("A", "B"))))


 Partitions of additive genetic values 
   - individuals: 6 
   - paths: 2 (A, X)
   - traits: 2 (trt1, trt2)
   - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'alphaPartitionSum'

 Trait: trt1 

  id fid mid loc gen trt1 trt1_pa trt1_w trt1_A trt1_X
1  1   0   0   A   1  100     0.0  100.0      0    100
2  2   0   0   B   1  120     0.0  120.0    120    120
3  3   2   1   A   2  115   110.0    5.0     60    115
4  4   0   0   B   2  130     0.0  130.0    130    130
5  5   4   3   A   3  125   122.5    2.5     95    125
6  6   0   3   A   3  125    57.5   67.5     30    125

 Trait: trt2 

  id fid mid loc gen trt2 trt2_pa trt2_w trt2_A trt2_X
1  1   0   0   A   1  100     0.0  100.0    0.0    100
2  2   0   0   B   1  110     0.0  110.0  110.0    110
3  3   2   1   A   2  105   105.0    0.0   55.0    105
4  4   0   0   B   2  140     0.0  140.0  140.0    140
5  5   4   3   A   3   85   122.5  -37.5   97.5     85
6  6   0   3   A   3  110    52.5   57.5   27.5    110

> 
> ## Summarize by generation
> (tmpS <- summary(tmp, by="gen"))


 Summary of partitions of additive genetic values 
   - paths: 2 (A, B)
   - traits: 2 (trt1, trt2)

 Trait: trt1 (absolute) 

  gen N   Sum    A    B
1   1 2 110.0 50.0 60.0
2   2 2 122.5 27.5 95.0
3   3 2 125.0 62.5 62.5

 Trait: trt1 (relative) 

  gen N Sum         A         B
1   1 2   1 0.4545455 0.5454545
2   2 2   1 0.2244898 0.7755102
3   3 2   1 0.5000000 0.5000000

 Trait: trt2 (absolute) 

  gen N   Sum  A    B
1   1 2 105.0 50 55.0
2   2 2 122.5 25 97.5
3   3 2  97.5 35 62.5

 Trait: trt2 (relative) 

  gen N Sum         A         B
1   1 2   1 0.4761905 0.5238095
2   2 2   1 0.2040816 0.7959184
3   3 2   1 0.3589744 0.6410256

> 
> ## Sum some partitions (working on object of class summaryAlphaPartition)
> (tmpS2 <- alphaPartitionSum(x=tmpS, map=list(c("X", "A", "B"), c("A", "B"))))


 Summary of partitions of additive genetic values 
   - paths: 2 (A, X)
   - traits: 2 (trt1, trt2)
   - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'alphaPartitionSum'

 Trait: trt1 (absolute) 

  gen N   Sum    A     X
1   1 2 110.0 60.0 110.0
2   2 2 122.5 95.0 122.5
3   3 2 125.0 62.5 125.0

 Trait: trt1 (relative) 

  gen N Sum         A X
1   1 2   1 0.5454545 1
2   2 2   1 0.7755102 1
3   3 2   1 0.5000000 1

 Trait: trt2 (absolute) 

  gen N   Sum    A     X
1   1 2 105.0 55.0 105.0
2   2 2 122.5 97.5 122.5
3   3 2  97.5 62.5  97.5

 Trait: trt2 (relative) 

  gen N Sum         A X
1   1 2   1 0.5238095 1
2   2 2   1 0.7959184 1
3   3 2   1 0.6410256 1

> 
> ## ... must be equal to
> (tmpS3 <- summary(tmp2, by="gen"))


 Summary of partitions of additive genetic values 
   - paths: 2 (A, X)
   - traits: 2 (trt1, trt2)
   - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'alphaPartitionSum'

 Trait: trt1 (absolute) 

  gen N   Sum    A     X
1   1 2 110.0 60.0 110.0
2   2 2 122.5 95.0 122.5
3   3 2 125.0 62.5 125.0

 Trait: trt1 (relative) 

  gen N Sum         A X
1   1 2   1 0.5454545 1
2   2 2   1 0.7755102 1
3   3 2   1 0.5000000 1

 Trait: trt2 (absolute) 

  gen N   Sum    A     X
1   1 2 105.0 55.0 105.0
2   2 2 122.5 97.5 122.5
3   3 2  97.5 62.5  97.5

 Trait: trt2 (relative) 

  gen N Sum         A X
1   1 2   1 0.5238095 1
2   2 2   1 0.7959184 1
3   3 2   1 0.6410256 1

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("alphaPartitionSum", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pedFixBirthYear")
> ### * pedFixBirthYear
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pedFixBirthYear
> ### Title: pedFixBirthYear.R
> ### Aliases: pedFixBirthYear
> 
> ### ** Examples
> 
> ## Example pedigree with missing (unknown) birth year for some individuals
> ped0 <- data.frame(     id=c( 1, 2, 3,  4, 5, 6, 7,  8, 9, 10, 11, 12, 13, 14),
+                         fid=c( 0, 0, 0,  1, 1, 1, 3,  3, 3,  5,  4,  0,  0, 12),
+                         mid=c( 0, 0, 0,  2, 0, 2, 2,  2, 5,  0,  0,  0,  0, 13),
+                         birth_dt=c(NA, 0, 1, NA, 3, 3, 3, 3, 4, 4, 5, NA, 6, 6) + 2000)
> 
> ## First run - using information from children
> ped1 <- pedFixBirthYear(x=ped0, interval=1)
Summary:
 - initially: 3 
 - fixed: 3 
 - left: 0 
> 
> ## Second run - using information from parents
> ped2 <- pedFixBirthYear(x=ped1, interval=1, down=TRUE)
Summary:
 - initially: 0 
 - fixed: 0 
 - left: 0 
> 
> ## Third run - using information from children, but with no success
> ped3 <- pedFixBirthYear(x=ped2, interval=1)
Summary:
 - initially: 0 
 - fixed: 0 
 - left: 0 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pedFixBirthYear", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pedSetBase")
> ### * pedSetBase
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pedSetBase
> ### Title: pedSetBase.R
> ### Aliases: pedSetBase
> 
> ### ** Examples
> 
> ## Example pedigree
> ped <- data.frame(      id=1:10,
+                        fid=c(0, 0, 0, 1, 1, 1, 3, 3, 3, 5),
+                        mid=c(0, 0, 0, 2, 0, 2, 2, 2, 5, 0),
+                   birth_dt=c(0, 0, 1, 2, 3, 3, 3, 4, 4, 5) + 2000)
> 
> ## Set base population as those individuals that were born after year 2002
> pedSetBase(x=ped, keep=ped$birth_dt > 2002, unknown=0)
All individuals: 10 
Removing: 4, 40 %
Kept: 6 
   id fid mid birth_dt
5   5   0   0     2003
6   6   0   0     2003
7   7   0   0     2003
8   8   0   0     2004
9   9   0   5     2004
10 10   5   0     2005
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pedSetBase", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.summaryAlphaPartition")
> ### * plot.summaryAlphaPartition
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.summaryAlphaPartition
> ### Title: plot.summaryAlphaPartition.R
> ### Aliases: plot.summaryAlphaPartition
> 
> ### ** Examples
> 
> ## Load an example data
> data("alphaPartition.ped")
> 
> ## Partition additive genetic values by location
> (res <- alphaPartition(x=alphaPartition.ped, colPath="loc", colAGV=c("agv1", "agv2")))

Size:
 - individuals: 48 
 - traits: 2 (agv1, agv2)
 - paths: 2 (1, 2)
 - unknown (missing) values:
agv1 agv2 
   0    0 


 Partitions of additive genetic values 
   - individuals: 48 
   - paths: 2 (1, 2)
   - traits: 2 (agv1, agv2)

 Trait: agv1 

  id  fid  mid loc gen sex loc.gen agv1 agv1_pa agv1_w agv1_1 agv1_2
1 01 <NA> <NA>   1   0   2     1-0    2       0      2      2      0
2 02 <NA> <NA>   1   0   1     1-0    2       0      2      2      0
3 03 <NA> <NA>   1   0   2     1-0    2       0      2      2      0
4 04 <NA> <NA>   1   0   2     1-0    2       0      2      2      0
5 05 <NA> <NA>   2   0   2     2-0    0       0      0      0      0
6 06 <NA> <NA>   2   0   1     2-0    0       0      0      0      0
...
   id fid mid loc gen sex loc.gen agv1 agv1_pa agv1_w agv1_1 agv1_2
43 53  44  43   1   5   2     1-5  5.3    4.15   1.15   5.30   0.00
44 54  44  43   1   5   2     1-5  4.2    4.15   0.05   4.20   0.00
45 55  44  45   2   5   2     2-5  4.1    3.15   0.95   3.35   0.75
46 56  44  46   2   5   2     2-5  2.7    3.20  -0.50   3.35  -0.65
47 57  44  47   2   5   2     2-5  3.5    3.20   0.30   3.35   0.15
48 58  44  48   2   5   2     2-5  3.8    4.35  -0.55   3.35   0.45

 Trait: agv2 

  id  fid  mid loc gen sex loc.gen agv2 agv2_pa agv2_w agv2_1 agv2_2
1 01 <NA> <NA>   1   0   2     1-0    2       0      2      2      0
2 02 <NA> <NA>   1   0   1     1-0    2       0      2      2      0
3 03 <NA> <NA>   1   0   2     1-0    2       0      2      2      0
4 04 <NA> <NA>   1   0   2     1-0    2       0      2      2      0
5 05 <NA> <NA>   2   0   2     2-0    0       0      0      0      0
6 06 <NA> <NA>   2   0   1     2-0    0       0      0      0      0
...
   id fid mid loc gen sex loc.gen agv2 agv2_pa agv2_w agv2_1 agv2_2
43 53  44  43   1   5   2     1-5  5.3    4.15   1.15   5.30   0.00
44 54  44  43   1   5   2     1-5  4.2    4.15   0.05   4.20   0.00
45 55  44  45   2   5   2     2-5  3.7    3.65   0.05   3.35   0.35
46 56  44  46   2   5   2     2-5  5.2    4.00   1.20   3.35   1.85
47 57  44  47   2   5   2     2-5  4.1    3.90   0.20   3.35   0.75
48 58  44  48   2   5   2     2-5  4.3    3.60   0.70   3.35   0.95

> 
> ## Summarize population by generation (=trend)
> (ret <- summary(res, by="gen"))


 Summary of partitions of additive genetic values 
   - paths: 2 (1, 2)
   - traits: 2 (agv1, agv2)

 Trait: agv1 (absolute) 

  gen N    Sum      1       2
1   0 8 1.0000 1.0000  0.0000
2   1 8 1.4875 1.2125  0.2750
3   2 8 1.8875 2.0500 -0.1625
4   3 8 2.7500 2.6250  0.1250
5   4 8 3.6125 3.4875  0.1250
6   5 8 4.0625 3.9750  0.0875

 Trait: agv1 (relative) 

  gen N Sum         1           2
1   0 8   1 1.0000000  0.00000000
2   1 8   1 0.8151261  0.18487395
3   2 8   1 1.0860927 -0.08609272
4   3 8   1 0.9545455  0.04545455
5   4 8   1 0.9653979  0.03460208
6   5 8   1 0.9784615  0.02153846

 Trait: agv2 (absolute) 

  gen N    Sum      1      2
1   0 8 1.0000 1.0000 0.0000
2   1 8 1.5500 1.2125 0.3375
3   2 8 2.7125 2.0500 0.6625
4   3 8 3.2750 2.6250 0.6500
5   4 8 3.9250 3.4875 0.4375
6   5 8 4.4625 3.9750 0.4875

 Trait: agv2 (relative) 

  gen N Sum         1         2
1   0 8   1 1.0000000 0.0000000
2   1 8   1 0.7822581 0.2177419
3   2 8   1 0.7557604 0.2442396
4   3 8   1 0.8015267 0.1984733
5   4 8   1 0.8885350 0.1114650
6   5 8   1 0.8907563 0.1092437

> 
> ## Plot the partitions
> p <- plot(ret, ylab=c("AGV for trait 1", "AGV for trait 2"), xlab="Generation")
> print(p[[1]]$abs)
> print(p[[1]]$rel)
> print(p[[2]])
$abs

$rel

> #print(p)
> 
> ## Partition additive genetic values by location and sex
> alphaPartition.ped$loc.sex <- with(alphaPartition.ped, paste(loc, sex, sep="-"))
> (res <- alphaPartition(x=alphaPartition.ped, colPath="loc.sex", colAGV=c("agv1", "agv2")))

Size:
 - individuals: 48 
 - traits: 2 (agv1, agv2)
 - paths: 4 (1-1, 1-2, 2-1, 2-2)
 - unknown (missing) values:
agv1 agv2 
   0    0 


 Partitions of additive genetic values 
   - individuals: 48 
   - paths: 4 (1-1, 1-2, 2-1, 2-2)
   - traits: 2 (agv1, agv2)

 Trait: agv1 

  id  fid  mid loc gen sex loc.gen loc.sex agv1 agv1_pa agv1_w agv1_1-1
1 01 <NA> <NA>   1   0   2     1-0     1-2    2       0      2        0
2 02 <NA> <NA>   1   0   1     1-0     1-1    2       0      2        2
3 03 <NA> <NA>   1   0   2     1-0     1-2    2       0      2        0
4 04 <NA> <NA>   1   0   2     1-0     1-2    2       0      2        0
5 05 <NA> <NA>   2   0   2     2-0     2-2    0       0      0        0
6 06 <NA> <NA>   2   0   1     2-0     2-1    0       0      0        0
  agv1_1-2 agv1_2-1 agv1_2-2
1        2        0        0
2        0        0        0
3        2        0        0
4        2        0        0
5        0        0        0
6        0        0        0
...
   id fid mid loc gen sex loc.gen loc.sex agv1 agv1_pa agv1_w agv1_1-1 agv1_1-2
43 53  44  43   1   5   2     1-5     1-2  5.3    4.15   1.15   2.3250   2.9750
44 54  44  43   1   5   2     1-5     1-2  4.2    4.15   0.05   2.3250   1.8750
45 55  44  45   2   5   2     2-5     2-2  4.1    3.15   0.95   2.2625   1.0875
46 56  44  46   2   5   2     2-5     2-2  2.7    3.20  -0.50   2.2625   1.0875
47 57  44  47   2   5   2     2-5     2-2  3.5    3.20   0.30   2.2625   1.0875
48 58  44  48   2   5   2     2-5     2-2  3.8    4.35  -0.55   2.2625   1.0875
   agv1_2-1 agv1_2-2
43        0     0.00
44        0     0.00
45        0     0.75
46        0    -0.65
47        0     0.15
48        0     0.45

 Trait: agv2 

  id  fid  mid loc gen sex loc.gen loc.sex agv2 agv2_pa agv2_w agv2_1-1
1 01 <NA> <NA>   1   0   2     1-0     1-2    2       0      2        0
2 02 <NA> <NA>   1   0   1     1-0     1-1    2       0      2        2
3 03 <NA> <NA>   1   0   2     1-0     1-2    2       0      2        0
4 04 <NA> <NA>   1   0   2     1-0     1-2    2       0      2        0
5 05 <NA> <NA>   2   0   2     2-0     2-2    0       0      0        0
6 06 <NA> <NA>   2   0   1     2-0     2-1    0       0      0        0
  agv2_1-2 agv2_2-1 agv2_2-2
1        2        0        0
2        0        0        0
3        2        0        0
4        2        0        0
5        0        0        0
6        0        0        0
...
   id fid mid loc gen sex loc.gen loc.sex agv2 agv2_pa agv2_w agv2_1-1 agv2_1-2
43 53  44  43   1   5   2     1-5     1-2  5.3    4.15   1.15   2.3250   2.9750
44 54  44  43   1   5   2     1-5     1-2  4.2    4.15   0.05   2.3250   1.8750
45 55  44  45   2   5   2     2-5     2-2  3.7    3.65   0.05   2.2625   1.0875
46 56  44  46   2   5   2     2-5     2-2  5.2    4.00   1.20   2.2625   1.0875
47 57  44  47   2   5   2     2-5     2-2  4.1    3.90   0.20   2.2625   1.0875
48 58  44  48   2   5   2     2-5     2-2  4.3    3.60   0.70   2.2625   1.0875
   agv2_2-1 agv2_2-2
43        0     0.00
44        0     0.00
45        0     0.35
46        0     1.85
47        0     0.75
48        0     0.95

> 
> ## Summarize population by generation (=trend)
> (ret <- summary(res, by="gen"))


 Summary of partitions of additive genetic values 
   - paths: 4 (1-1, 1-2, 2-1, 2-2)
   - traits: 2 (agv1, agv2)

 Trait: agv1 (absolute) 

  gen N    Sum     1-1     1-2 2-1     2-2
1   0 8 1.0000 0.25000 0.75000   0  0.0000
2   1 8 1.4875 0.60000 0.61250   0  0.2750
3   2 8 1.8875 1.16875 0.88125   0 -0.1625
4   3 8 2.7500 1.45000 1.17500   0  0.1250
5   4 8 3.6125 1.92500 1.56250   0  0.1250
6   5 8 4.0625 2.29375 1.68125   0  0.0875

 Trait: agv1 (relative) 

  gen N Sum       1-1       1-2 2-1         2-2
1   0 8   1 0.2500000 0.7500000   0  0.00000000
2   1 8   1 0.4033613 0.4117647   0  0.18487395
3   2 8   1 0.6192053 0.4668874   0 -0.08609272
4   3 8   1 0.5272727 0.4272727   0  0.04545455
5   4 8   1 0.5328720 0.4325260   0  0.03460208
6   5 8   1 0.5646154 0.4138462   0  0.02153846

 Trait: agv2 (absolute) 

  gen N    Sum     1-1     1-2 2-1    2-2
1   0 8 1.0000 0.25000 0.75000   0 0.0000
2   1 8 1.5500 0.60000 0.61250   0 0.3375
3   2 8 2.7125 1.16875 0.88125   0 0.6625
4   3 8 3.2750 1.45000 1.17500   0 0.6500
5   4 8 3.9250 1.92500 1.56250   0 0.4375
6   5 8 4.4625 2.29375 1.68125   0 0.4875

 Trait: agv2 (relative) 

  gen N Sum       1-1       1-2 2-1       2-2
1   0 8   1 0.2500000 0.7500000   0 0.0000000
2   1 8   1 0.3870968 0.3951613   0 0.2177419
3   2 8   1 0.4308756 0.3248848   0 0.2442396
4   3 8   1 0.4427481 0.3587786   0 0.1984733
5   4 8   1 0.4904459 0.3980892   0 0.1114650
6   5 8   1 0.5140056 0.3767507   0 0.1092437

> 
> ## Plot the partitions
> p <- plot(ret, ylab=c("AGV for trait 1", "AGV for trait 2"), xlab="Generation")
> print(p)
> p <- plot(ret, ylab=c("AGV for trait 1", "AGV for trait 2"), xlab="Generation",
+         lineTypeList=list("-1"=1, "-2"=2, def=3))
> print(p)
> p <- plot(ret, ylab=c("AGV for trait 1", "AGV for trait 2"), xlab="Generation",
+         lineTypeList=list("-1"=1, "-2"=2, def=3), useGgplot2=FALSE, useDirectLabels = FALSE)
> print(p)
> 
> ## Plot control (color and type of lines + limits)
> p <- plot(ret, ylab=c("AGV for trait 1", "AGV for trait 2"), xlab="Generation",
+         useGgplot2=FALSE, color=c("green", "gray"), lineType=c(2, 3),
+         sortValue=FALSE, lineSize=4,
+         xlim=c(-1, 7), ylim=list(c(0, 5), c(-5, 5)), ylimRel=list(c(0, 100), c(0, 50)))
Error in get(p$panel) : object 'panel.xyplot' not found
Calls: plot ... plot.summaryAlphaPartition -> <Anonymous> -> direct.label.trellis -> get
Execution halted
